services:
  backend:
    build:
      context: .
    ports:
      - '3000:${PORT}'
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    develop:
      watch:
        - action: sync
          path: ./src
          target: ./app/src
        - action: sync
          path: ./infrastructure
          target: ./app/infrastructure
        - action: rebuild
          path: package.json
        - action: rebuild
          path: ./env

    networks:
      local:
  db:
    image: postgres
    restart: always
    shm_size: 128mb
    ports:
      - 5434:${PG_PORT}
    volumes:
      - data_pg:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      local:

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,error}] disk_free_limit ${RABBITMQ_LIMIT}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    ports:
      - 15672:${RABBITMQ_PORT}
      - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      local:

volumes:
  data_pg:
  rabbitmq:

networks:
  local:
